#include <iostream>
#include <fstream>
#include <cmath>

#define MAX 31

using namespace std;

bool promising(int, int, int);
void knapsack(int, int, int);

int p[MAX];
int w[MAX];
int bestset[MAX];
int include[MAX];
int W;
int n;
int maxprofit;

int main()
{
	char* fileName = new char[30];

	cout << "input file name : ";
	cin >> fileName;
	
	int i, j;

	maxprofit = 0;
		
	ifstream inFile(fileName, ios::in);
	ofstream outFile("output.txt", ios::out);
	
	if(!inFile)
	{
		cerr << "This file is not found" << endl;
		exit(1);
	}

	inFile >> n;

	inFile >> W;


	i = 1, j = 1;

	while(!inFile.eof())
	{

		inFile >> p[i] >> w[i];
		i++;
	
	}

	knapsack(0, 0, 0);

	for(i = 1; i <= n; i++)
		include[i] = 0;
		
	outFile << maxprofit << endl;

	for(j = 1; j <= n; j++)		
	{
		outFile << bestset[j];
		
		if(j != n)
			outFile << endl;

	}

	inFile.close();
	outFile.close();

	return 0;

}

void knapsack(int i, int profit, int weight)
{

	int j;

	if(weight <= W && profit > maxprofit)
	{
		maxprofit = profit;
		
		for(j = 1; j <= n; j++)
		{
			bestset[j] = include[j];
		}

	}

	if(promising(i, profit, weight))
	{
		include[i+1] = 1;
		knapsack(i+1, profit + p[i+1], weight + w[i+1]);
		include[i+1] = 0;
		knapsack(i+1, profit, weight);
	}

	
	
}

bool promising(int i, int profit, int weight)
{
	int j, k, totweight;
	double bound;
	bool pm;

	if(weight >= W)
		pm = false;

	else
	{
		j = i+1;
		bound = profit;
		totweight = weight;

		while( j <= n && totweight + w[j] <= W)
		{
			totweight = totweight + w[j];
			bound = bound + p[j];
			j++;
		}

		k = j;

		if(k <= n)
			bound += (W-totweight)*p[k]/w[k];
			
		pm = bound > maxprofit;
	}

	return pm;
}